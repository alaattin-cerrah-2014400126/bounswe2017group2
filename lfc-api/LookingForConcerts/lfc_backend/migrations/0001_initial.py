# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2017-12-25 18:24
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='RegisteredUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('spotify_id', models.CharField(blank=True, max_length=50, null=True, verbose_name='spotify_id')),
                ('spotify_display_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='spotify_display_name')),
                ('spotify_refresh_token', models.CharField(blank=True, max_length=50, null=True, verbose_name='spotify_refresh_token')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, max_length=254, unique=True, verbose_name='Email Address')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='birth_date')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('image', models.CharField(blank=True, max_length=300, null=True)),
                ('followers', models.ManyToManyField(related_name='following', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('spotify_id', models.CharField(max_length=150, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('comment_id', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.CharField(default='', max_length=600)),
            ],
        ),
        migrations.CreateModel(
            name='Concert',
            fields=[
                ('concert_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=150)),
                ('date_time', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=2000)),
                ('price_min', models.IntegerField()),
                ('price_max', models.IntegerField()),
                ('seller_url', models.CharField(max_length=300, null=True)),
                ('image', models.CharField(blank=True, max_length=300, null=True)),
                ('artist', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='concerts', to='lfc_backend.Artist')),
                ('attendees', models.ManyToManyField(related_name='concerts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ConcertImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.FileField(upload_to='concert/')),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height', models.IntegerField()),
                ('url', models.URLField()),
                ('width', models.IntegerField()),
                ('artist', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='lfc_backend.Artist')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('location_id', models.AutoField(primary_key=True, serialize=False)),
                ('venue', models.CharField(max_length=200)),
                ('coordinates', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('rating_id', models.AutoField(primary_key=True, serialize=False)),
                ('concert_atmosphere', models.IntegerField(null=True, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('artist_costumes', models.IntegerField(null=True, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('music_quality', models.IntegerField(null=True, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('stage_show', models.IntegerField(null=True, validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(1)])),
                ('concert', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='lfc_backend.Concert')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='concert_ratings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('report_id', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('tag_id', models.AutoField(primary_key=True, serialize=False)),
                ('value', models.CharField(max_length=20)),
                ('context', models.CharField(blank=True, max_length=200)),
                ('wikidata_uri', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='UserImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.FileField(upload_to='user/')),
            ],
        ),
        migrations.CreateModel(
            name='Concert_Report',
            fields=[
                ('report_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='lfc_backend.Report')),
                ('report_type', models.PositiveSmallIntegerField()),
            ],
            bases=('lfc_backend.report',),
        ),
        migrations.AddField(
            model_name='report',
            name='reporter',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='reported_concerts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='concert',
            name='location',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='concerts', to='lfc_backend.Location'),
        ),
        migrations.AddField(
            model_name='concert',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='concerts', to='lfc_backend.Tag'),
        ),
        migrations.AddField(
            model_name='comment',
            name='concert_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='lfc_backend.Concert'),
        ),
        migrations.AddField(
            model_name='comment',
            name='owner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='rating',
            unique_together=set([('owner', 'concert')]),
        ),
        migrations.AddField(
            model_name='concert_report',
            name='concert',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='lfc_backend.Concert'),
        ),
        migrations.AlterUniqueTogether(
            name='concert',
            unique_together=set([('artist', 'date_time')]),
        ),
    ]
